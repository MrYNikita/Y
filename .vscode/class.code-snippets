{
	"SDFY-1.0": {
		"body": [
			"/**",
			" * @typedef TB$1",
			" * @prop {any} _",
			" * @typedef {D$1&TB$1} T$1",
		    "*/",
			"",
			"class S$1 {",
			"    ",
			"    ",
			"    ",
			"};",
			"class D$1 extends S$1 {",
			"    ",
			"    ",
			"    ",
			"};",
			"class F$1 extends D$1 {",
			"    ",
			"    /**",
			"     * ",
			"     * - Версия `0.0.0`",
			"     * - Цепочка `BDVHC`",
			"     *  @arg {T$1} t",
			"    */",
			"    constructor(t = {}) {",
			"        ",
			"        t = F$1.#before(...arguments);",
			"        ",
			"        super(t);",
			"        ",
			"        F$1.#deceit.apply(this, [t]);",
			"        ",
			"    };",
			"    ",
			"    /** @arg {T$1} t @this {[]} */",
			"    static #before(t) {",
			"        ",
			"        ",
			"        ",
			"        if (!t) t = {};",
			"        ",
			"        return t;",
			"        ",
			"    };",
			"    /** @arg {T$1} t @this {Y$1} */",
			"    static #deceit(t) {",
			"        ",
			"        try {",
			"            ",
			"            F$1.#verify.apply(this, arguments);",
			"            ",
			"        } catch (e) {",
			"            ",
			"            throw e;",
			"            ",
			"        };",
			"        ",
			"    };",
			"    /** @arg {T$1} t @this {Y$1} */",
			"    static #verify(t) {",
			"        ",
			"        const {",
			"            ",
			"            ",
			"            ",
			"        } = t;",
			"        ",
			"        F$1.#handle.apply(this, arguments);",
			"        ",
			"    };",
			"    /** @arg {T$1} t @this {Y$1} */",
			"    static #handle(t) {",
			"        ",
			"        let {",
			"            ",
			"            ",
			"            ",
			"        } = t;",
			"        ",
			"        ",
			"        ",
            "        t = {",
            "            ",
            "            ...t,",
            "            ",
            "        };",
            "       ",
			"        F$1.#create.apply(this, [t]);",
			"        ",
			"    };",
			"    /** @arg {T$1} t @this {Y$1} */",
			"    static #create(t) {",
			"        ",
			"        const {",
			"            ",
			"            ",
			"            ",
			"        } = t;",
			"        ",
			"        jectAdopt.apply(this, [t]);",
			"        ",
			"        ",
			"        ",
			"    };",
			"    ",
			"};",
			"",
			"/**",
			" *",
			" * - Тип `SDFY`",
			" * - Версия `0.0.0`",
			" * - Цепочка `BDVHC`",
			"*/",
			"class Y$1 extends F$1 {",
			"    ",
			"    ",
			"    ",
			"};",
		]
		// "prefix": "#cl_SDFY1",
	},
	"SDFY-2.0": {
		"body": [
			"import { jectAdopt } from \"\"",
			"",
			"/**",
			" * @typedef TB$1",
			" * @prop {any} _",
			" * @typedef {D$1&TB$1} T$1",
		    "*/",
			"",
			"class S$1 {",
			"    ",
			"    ",
			"    ",
			"};",
			"class D$1 extends S$1 {",
			"    ",
			"    ",
			"    ",
			"};",
			"class F$1 extends D$1 {",
			"    ",
			"    /**",
			"     * ",
			"     * - Версия `0.0.0`",
			"     * - Цепочка `BDVHC`",
			"     *  @arg {T$1} t",
			"    */",
			"    constructor(t = {}) {",
			"        ",
			"        t = F$1.#before(arguments);",
			"        ",
			"        F$1.#deceit(t);",
			"        ",
			"        super(t);",
			"        ",
			"        F$1.#create.apply(this, [t]);",
			"        ",
			"    };",
			"    ",
			"    /** @arg {T$1} t */",
			"    static #before(t) {",
			"        ",
			"        if (t?.length === 1 && t[0]?.constructor === Object) {",
			"            ",
			"            return t[0];",
			"            ",
			"        } else if (t?.length) {",
			"            ",
			"            const r = {};",
			"            ",
			"            ",
			"            ",
			"            return r;",
			"            ",
			"        } else return {};",
			"        ",
			"    };",
			"    /** @arg {T$1} t @this {Y$1} */",
			"    static #deceit(t) {",
			"        ",
			"        try {",
			"            ",
			"            F$1.#verify(t);",
			"            ",
			"        } catch (e) {",
			"            ",
			"            throw e;",
			"            ",
			"        };",
			"        ",
			"    };",
			"    /** @arg {T$1} t @this {Y$1} */",
			"    static #verify(t) {",
			"        ",
			"        const {",
			"            ",
			"            ",
			"            ",
			"        } = t;",
			"        ",
			"        F$1.#handle(t);",
			"        ",
			"    };",
			"    /** @arg {T$1} t @this {Y$1} */",
			"    static #handle(t) {",
			"        ",
			"        let {",
			"            ",
			"            ",
			"            ",
			"        } = t;",
			"        ",
			"        ",
			"        ",
            "        t = {",
            "            ",
            "            ...t,",
            "            ",
            "        };",
			"        ",
			"    };",
			"    /** @arg {T$1} t @this {Y$1} */",
			"    static #create(t) {",
			"        ",
			"        const {",
			"            ",
			"            ",
			"            ",
			"        } = t;",
			"        ",
			"        jectAdopt(this, t);",
			"        ",
			"        ",
			"        ",
			"    };",
			"    ",
			"};",
			"",
			"/**",
			" *",
			" * - Тип `SDFY-2.0`",
			" * - Версия `0.0.0`",
			" * - Цепочка `BDVHC`",
			"*/",
			"$0class Y$1 extends F$1 {",
			"    ",
			"    ",
			"    ",
			"};",
		],
		// "prefix": "#cl_SDFY",
	},
	"SDIFY-1.0": {
		"body": [
			"import { jectAdopt } from \"\"",
			"",
			"/**",
			" * @typedef TB$1",
			" * @prop {any} _",
			" * @typedef {D$1&TB$1} T$1",
		    "*/",
			"",
			"class S$1 {",
			"    ",
			"    ",
			"    ",
			"};",
			"class D$1 extends S$1 {",
			"    ",
			"    ",
			"    ",
			"};",
			"class I$1 extends D$1 {",
			"    ",
			"    ",
			"    ",
			"};",
			"class F$1 extends I$1 {",
			"    ",
			"    /**",
			"     * Контсруктор класса `Y$1`",
			"     * - Версия `0.0.0`",
			"     * - Цепочка `BDVHC`",
			"     *  @arg {T$1} t",
			"    */",
			"    constructor(t = {}) {",
			"        ",
			"        t = F$1.#before(Object.values(arguments));",
			"        ",
			"        F$1.#deceit(t);",
			"        ",
			"        super(t);",
			"        ",
			"        F$1.#create.apply(this, [t]);",
			"        ",
			"    };",
			"    ",
			"    /** @arg {Array<any>} t */",
			"    static #before(t) {",
			"        ",
			"        if (t?.length === 1 && t[0]?.constructor === Object) {",
			"            ",
			"            return t[0];",
			"            ",
			"        } else if (t?.length) {",
			"            ",
			"            const r = {};",
			"            ",
			"            ",
			"            ",
			"            return r;",
			"            ",
			"        } else return {};",
			"        ",
			"    };",
			"    /** @arg {T$1} t @this {Y$1} */",
			"    static #deceit(t) {",
			"        ",
			"        try {",
			"            ",
			"            F$1.#verify(t);",
			"            ",
			"        } catch (e) {",
			"            ",
			"            throw e;",
			"            ",
			"        };",
			"        ",
			"    };",
			"    /** @arg {T$1} t @this {Y$1} */",
			"    static #verify(t) {",
			"        ",
			"        const {",
			"            ",
			"            ",
			"            ",
			"        } = t;",
			"        ",
			"        F$1.#handle(t);",
			"        ",
			"    };",
			"    /** @arg {T$1} t @this {Y$1} */",
			"    static #handle(t) {",
			"        ",
			"        let {",
			"            ",
			"            ",
			"            ",
			"        } = t;",
			"        ",
			"        ",
			"        ",
            "        t = {",
            "            ",
            "            ...t,",
            "            ",
            "        };",
			"        ",
			"    };",
			"    /** @arg {T$1} t @this {Y$1} */",
			"    static #create(t) {",
			"        ",
			"        const {",
			"            ",
			"            ",
			"            ",
			"        } = t;",
			"        ",
			"        jectAdopt(this, t);",
			"        ",
			"        ",
			"        ",
			"    };",
			"    ",
			"};",
			"",
			"/**",
			" *",
			" * - Тип `SDIFY-1.0`",
			" * - Версия `0.0.0`",
			" * - Цепочка `BDVHC`",
			"*/",
			"$0class Y$1 extends F$1 {",
			"    ",
			"    ",
			"    ",
			"};",
		],
		// "prefix": "#cl_SDIFY",
	},
    "SDIMFY-1.0": {

        "body": [
			"import { jectAdopt } from \"\"",
			"",
			"/**",
			" * @typedef TB$1",
			" * @prop {any} _",
            " * @typedef {{[p in Exclude<keyof D$1,keyof S$1>|Exclude<keyof S$1,keyof D$1>]:(D$1[p]&S$1[p])}} TD$1",
			" * @typedef {TD$1&TB$1} T$1",
		    "*/",
			"",
			"class S$1 {",
			"    ",
			"    ",
			"    ",
			"};",
			"class D$1 extends S$1 {",
			"    ",
			"    ",
			"    ",
			"};",
			"class I$1 extends D$1 {",
			"    ",
			"    ",
			"    ",
			"};",
            "class M$1 extends I$1 {",
			"    ",
			"    ",
			"    ",
			"};",
			"class F$1 extends M$1 {",
			"    ",
			"    /**",
			"     * Контсруктор класса `Y$1`",
			"     * - Версия `0.0.0`",
			"     * - Цепочка `BDVHC`",
			"     *  @arg {T$1} t",
			"    */",
			"    constructor(t = {}) {",
			"        ",
			"        t = F$1.#before(Object.values(arguments));",
			"        ",
			"        F$1.#deceit(t);",
			"        ",
			"        super(t);",
			"        ",
			"        F$1.#create.apply(this, [t]);",
			"        ",
			"    };",
			"    ",
			"    /** @arg {any[]} t */",
			"    static #before(t) {",
			"        ",
			"        if (t?.length === 1 && [Object, Y$1].includes(t[0]?.constructor) && !Object.getOwnPropertyNames(t[0]).includes('_ytp')) {",
			"            ",
			"            return t[0];",
			"            ",
			"        } else if (t?.length) {",
			"            ",
			"            /** @type {T$1&D$1} */",
			"            const r = {};",
			"            ",
			"            if (t[0]?._ytp) t = [...t[0]._ytp];",
			"            ",
			"            switch (t.length) {",
			"                ",
			"                case 3: ",
			"                case 2: ",
			"                case 1: ",
			"                ",
			"            };",
			"            ",
			"            return Object.values(r).length ? r : { _ytp: t };",
			"            ",
			"        } else return {};",
			"        ",
			"    };",
			"    /** @arg {T$1} t @this {Y$1} */",
			"    static #deceit(t) {",
			"        ",
			"        try {",
			"            ",
			"            F$1.#verify(t);",
			"            ",
			"        } catch (e) {",
			"            ",
			"            throw e;",
			"            ",
			"        };",
			"        ",
			"    };",
			"    /** @arg {T$1} t @this {Y$1} */",
			"    static #verify(t) {",
			"        ",
			"        const {",
			"            ",
			"            ",
			"            ",
			"        } = t;",
			"        ",
			"        F$1.#handle(t);",
			"        ",
			"    };",
			"    /** @arg {T$1} t @this {Y$1} */",
			"    static #handle(t) {",
			"        ",
			"        ",
			"        ",
			"    };",
			"    /** @arg {T$1} t @this {Y$1} */",
			"    static #create(t) {",
			"        ",
			"        const {",
			"            ",
			"            ",
			"            ",
			"        } = t;",
			"        ",
			"        jectAdopt(this, t);",
			"        ",
			"        ",
			"        ",
			"    };",
			"    ",
			"};",
			"",
			"/**",
			" * Класс `Y$1`",
            " * ",
            " * ",
			" * - Тип `SDIMFY`",
			" * - Версия `0.0.0`",
			" * - Модуль ``",
			" * - Цепочка `BDVHC`",
			"*/",
			"$0class Y$1 extends F$1 {",
			"    ",
			"    ",
			"    ",
			"};",
		],
		"prefix": "#cl_SDIMFY",

    },
}