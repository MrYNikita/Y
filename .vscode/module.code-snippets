{
    "test": {
        "body": [
            // "${1:${RELATIVE_FILEPATH/[^\\d\\w._-]/\\//g}}$0",
            // "${2:${1/\\w/_/g}}",
            "${0:t}",
            "$0",
        ],
        "prefix": "#test"
    },

    "class": {

        "body": [
			"//#region YI",
            "",
            "//#endregion",
			"//#region YT",
			"",
			"/** ### Y${1:${TM_FILENAME_BASE/(\\w)/${1:/upcase}/}}T",
            " * - Тип `T`",
            " * - Версия `0.0.0`",
            " * - Модуль `Y$1`",
            " * ",
            " * Основной параметр модуля `Y$1`.",
            " * ",
            " * @typedef {Y$1TE&Y$1TU} Y$1T",
            " * ",
            "*/",
			"/** ### Y$1TE",
            " * - Тип `TE`",
            " * - Версия `0.0.0`",
            " * - Модуль `Y$1`",
            " * ",
            " * Параметр наследования `Y$1`.",
            " * ",
            " * @typedef {{[p in Exclude<keyof D$1,keyof S$1>|Exclude<keyof S$1,keyof D$1>]:(D$1[p]&S$1[p])}} Y$1TE",
            " * ",
            "*/",
			"/** ### Y$1TU",
            " * - Тип `TU`",
            " * - Версия `0.0.0`",
            " * - Модуль `Y$1`",
            " * ",
            " * Уникальные параметры `Y$1`.",
            " * ",
            " * @typedef Y$1TU",
            " * @prop {any} _",
            " * ",
            "*/",
			"",
			"//#endregion",
			"",
			"class S$1 $2 {",
			"    ",
			"    ",
			"    ",
			"};",
			"class D$1 extends S$1 {",
			"    ",
			"    ",
			"    ",
			"};",
			"class I$1 extends D$1 {",
			"    ",
			"    ",
			"    ",
			"};",
            "class M$1 extends I$1 {",
			"    ",
			"    ",
			"    ",
			"};",
			"class F$1 extends M$1 {",
			"    ",
			"    /**",
			"     * ### Y$1.constructor",
			"     * - Версия `0.0.0`",
			"     * - Цепочка `BDVHC`",
			"     *",
			"     *",
			"     *",
			"     * ***",
			"     *  @arg {Y$1T} t",
			"    */",
			"    constructor(t = {}) {",
			"        ",
			"        t = F$1.#before(Object.values(arguments));",
			"        ",
			"        F$1.#deceit(t);",
			"        ",
			"        super(t);",
			"        ",
			"        F$1.#create.apply(this, [t]);",
			"        ",
			"    };",
			"    ",
			"    /** @arg {any[]} t */",
			"    static #before(t) {",
			"        ",
			"        if (t?.length === 1 && [Object, Y$1].includes(t[0]?.constructor) && !Object.getOwnPropertyNames(t[0]).includes('_ytp')) {",
			"            ",
			"            return t[0];",
			"            ",
			"        } else if (t?.length) {",
			"            ",
			"            /** @type {Y$1T} */",
			"            const r = {};",
			"            ",
			"            if (t[0]?._ytp) t = [...t[0]._ytp];",
			"            ",
			"            switch (t.length) {",
			"                ",
			"                case 3: ",
			"                case 2: ",
			"                case 1: ",
			"                ",
			"            };",
			"            ",
			"            return Object.values(r).length ? r : { _ytp: t };",
			"            ",
			"        } else return {};",
			"        ",
			"    };",
			"    /** @arg {Y$1T} t @this {Y$1} */",
			"    static #deceit(t) {",
			"        ",
			"        try {",
			"            ",
			"            F$1.#verify(t);",
			"            ",
			"        } catch (e) {",
			"            ",
			"            throw e;",
			"            ",
			"        };",
			"        ",
			"    };",
			"    /** @arg {Y$1T} t @this {Y$1} */",
			"    static #verify(t) {",
			"        ",
			"        const {",
			"            ",
			"            ",
			"            ",
			"        } = t;",
			"        ",
			"        F$1.#handle(t);",
			"        ",
			"    };",
			"    /** @arg {Y$1T} t @this {Y$1} */",
			"    static #handle(t) {",
			"        ",
			"        ",
			"        ",
			"    };",
			"    /** @arg {Y$1T} t @this {Y$1} */",
			"    static #create(t) {",
			"        ",
			"        const {",
			"            ",
			"            ",
			"            ",
			"        } = t;",
			"        ",
			"        this.adopt(t);",
			"        ",
			"        ",
			"        ",
			"    };",
			"    ",
			"};",
			"",
			"/**",
            " * ### Y$1",
			" * - Тип `SDIMFY`",
			" * - Версия `0.0.0`",
			" * - Модуль `Y$1`",
			" * - Цепочка `BDVHC`",
            " * ***",
            " * ",
			"*/",
			"$0class Y$1 extends F$1 {",
			"    ",
			"    ",
			"    ",
			"};",
		],
        "prefix": "#c"

    },
    "classData": {

        "body": [
            "import { jectAdopt } from \"\"",
			"",
			"//#region YT",
			"",
			"/** ### Y$1T",
            " * - Тип `T`",
            " * - Версия `0.0.0`",
            " * - Модуль `Y$1`",
            " * ",
            " * Основной параметр модуля `Y$1`.",
            " * ",
            " * @typedef {Y$1TE&Y$1TU} Y$1T",
            " * ",
            "*/",
			"/** ### Y$1TE",
            " * - Тип `TE`",
            " * - Версия `0.0.0`",
            " * - Модуль `Y$1`",
            " * ",
            " * Параметр наследования `Y$1`.",
            " * ",
            " * @typedef {{[p in Exclude<keyof D$1,keyof S$1>|Exclude<keyof S$1,keyof D$1>]:(D$1[p]&S$1[p])}} Y$1TE",
            " * ",
            "*/",
			"/** ### Y$1TU",
            " * - Тип `TU`",
            " * - Версия `0.0.0`",
            " * - Модуль `Y$1`",
            " * ",
            " * Уникальные параметры `Y$1`.",
            " * ",
            " * @typedef Y$1TU",
            " * @prop {any} _",
            " * ",
            "*/",
			"",
			"class S$1 {",
			"    ",
			"    ",
			"    ",
			"};",
            "class D$1 extends S$1 {",
			"    ",
			"    ",
			"    ",
			"};",
            "/**",
            " * ### Y$1",
			" * - Тип `SDIMFY`",
			" * - Версия `0.0.0`",
			" * - Модуль `Y$1`",
			" * - Цепочка `BDVHC`",
            " * ***",
            " * ",
			"*/",
            "class Y$1 extends D$1 {",
			"    ",
			"    /**",
			"     * ### Y$1.constructor",
			"     * - Версия `0.0.0`",
			"     * - Цепочка `BDVHC`",
			"     *",
			"     *",
			"     *",
			"     * ***",
			"     *  @arg {Y$1T} t",
			"    */",
			"    constructor(t = {}) {",
			"        ",
			"        t = F$1.#before(Object.values(arguments));",
			"        ",
			"        F$1.#deceit(t);",
			"        ",
			"        super(t);",
			"        ",
			"        F$1.#create.apply(this, [t]);",
			"        ",
			"    };",
			"    ",
			"    /** @arg {any[]} t */",
			"    static #before(t) {",
			"        ",
			"        if (t?.length === 1 && [Object, Y$1].includes(t[0]?.constructor) && !Object.getOwnPropertyNames(t[0]).includes('_ytp')) {",
			"            ",
			"            return t[0];",
			"            ",
			"        } else if (t?.length) {",
			"            ",
			"            /** @type {Y$1T} */",
			"            const r = {};",
			"            ",
			"            if (t[0]?._ytp) t = [...t[0]._ytp];",
			"            ",
			"            switch (t.length) {",
			"                ",
			"                case 3: ",
			"                case 2: ",
			"                case 1: ",
			"                ",
			"            };",
			"            ",
			"            return Object.values(r).length ? r : { _ytp: t };",
			"            ",
			"        } else return {};",
			"        ",
			"    };",
			"    /** @arg {Y$1T} t @this {Y$1} */",
			"    static #deceit(t) {",
			"        ",
			"        try {",
			"            ",
			"            F$1.#verify(t);",
			"            ",
			"        } catch (e) {",
			"            ",
			"            throw e;",
			"            ",
			"        };",
			"        ",
			"    };",
			"    /** @arg {Y$1T} t @this {Y$1} */",
			"    static #verify(t) {",
			"        ",
			"        const {",
			"            ",
			"            ",
			"            ",
			"        } = t;",
			"        ",
			"        F$1.#handle(t);",
			"        ",
			"    };",
			"    /** @arg {Y$1T} t @this {Y$1} */",
			"    static #handle(t) {",
			"        ",
			"        ",
			"        ",
			"    };",
			"    /** @arg {Y$1T} t @this {Y$1} */",
			"    static #create(t) {",
			"        ",
			"        const {",
			"            ",
			"            ",
			"            ",
			"        } = t;",
			"        ",
			"        jectAdopt(this, t);",
			"        ",
			"        ",
			"        ",
			"    };",
			"    ",
			"};",
            "",
        ],
        "prefix": "#cData",
        "description": [
            "Класс данных.",
            "Используется в случаях, когда необходимо описать некоторые объекты, без какой либо внутренней логики.",
        ],

    },

    "value": {
        "body": [

            "/**",
            " * ### ${TM_FILENAME_BASE}V$1",
            " * - Тип `VE`",
            " * - Версия `0.0.0`",
            " * - Модуль `${TM_FILENAME_BASE}`",
            " * ",
            " * $2",
            " * ",
            " * ***",
            " * ",
            "*/",
            "export const ${TM_FILENAME_BASE}V$1 = $0;",

        ],
        "scope": "javascript",
        "prefix": "#v",
        "description": "Значение модуля."
    },
    "module": {

        "body": [

            "import { config } from \"\";",
            "",
            "//#region YT",
            "",
            "/** ### ${TM_FILENAME_BASE}T",
            " * - Тип `T`",
            " * - Версия `0.0.0`",
            " * - Модуль `$TM_FILENAME_BASE`",
            " * ",
            " * Основной параметр модуля `${TM_FILENAME_BASE}`.",
            " * ",
            " * @typedef ${TM_FILENAME_BASE}T",
            " * @prop {any} _",
            " * ",
            "*/",
            "",
            "//#endregion",
            "//#region YV",
            "",
            "",
            "",
            "//#endregion",
            "",

        ],
        "prefix": "#m"

    },
    "method": {

        "body": [

            "/**",
            " * ### $2",
            " * - Версия `0.0.0`",
            " * - Модуль `${TM_FILENAME_BASE}`",
            " * ***",
            " * ",
            " * $5",
            " * ",
            " * ***",
            " * $3",
            " * @${4|public,protected,private|}",
            "*/",
            "$1$2() {",
            "    ",
            "    ",
            "    ",
            "};",

        ],
        "prefix": "#fm"

    },
    "metadata": {

        "body": [
            "/**",
            " * @file $TM_FILENAME",
            " * @author ${1:Yakhin Nikita Artemovich} ${2:<mr.y.nikita@gmail.com>}",
            " * @copyright $1 $CURRENT_YEAR",
            "*/",
        ],
        "prefix": "#metadata"

    },

    "transmit": {

        "body": [

            "/** ### ${TM_FILENAME_BASE}T$1",
            " * - Тип `T`",
            " * - Версия `0.0.0`",
            " * - Модуль `$TM_FILENAME_BASE`",
            " * ",
            " * ",
            " * ",
            " * @typedef ${TM_FILENAME_BASE}T$1",
            " * @prop {any} _",
            " * ",
            "*/",

        ],
        "prefix": "#t"

    },
    "transmitType": {

        "body": [

            "/** ### ${TM_FILENAME_BASE}TT$2",
            " * - Тип `TT`",
            " * - Версия `0.0.0`",
            " * - Модуль `$TM_FILENAME_BASE`",
            " * ",
            " * ",
            " * ",
            " * @typedef {$1} ${TM_FILENAME_BASE}TT$2",
            " * ",
            "*/",

        ],
        "prefix": "#t_t"

    },

    "property": {

        "body": [

            "/**",
            " * ### $2",
            " * ",
            " * $6",
            " * ",
            " * *** ",
            " * @type {$4} ",
            " * @${5|public,protected,private|}",
            "*/",
            "$1$2$3",

        ],
        "prefix": "#p",
        "description": "Вставка свойства объекта или поля класса.",

    },
    "function": {
        "body": [
            "//#region $1 0.0.0",
            "",
            "/** ### ${TM_FILENAME_BASE}TF${1/(\\w)/${1:/upcase}/}",
            " * - Тип `TF`",
            " * - Версия `0.0.0`",
            " * - Модуль `$TM_FILENAME_BASE`",
            " * ***",
            " * ",
            " * Результирующие параметры функции `$1`.",
            " * ",
            " * @typedef {${TM_FILENAME_BASE}TFU${1/(\\w)/${1:/upcase}/}&${TM_FILENAME_BASE}T} ${TM_FILENAME_BASE}TF${1/(\\w)/${1:/upcase}/}",
            " * ",
            "*/",
            "/** ### ${TM_FILENAME_BASE}TFU${1/(\\w)/${1:/upcase}/}",
            " * - Тип `TFU`",
            " * - Версия `0.0.0`",
            " * - Модуль `$TM_FILENAME_BASE`",
            " * ",
            " * Уникальные параметры функции `$1`.",
            " * ",
            " * @typedef ${TM_FILENAME_BASE}TFU${1/(\\w)/${1:/upcase}/}",
            " * @prop {any} _",
            "*/",
            "",
            "/** @arg {${TM_FILENAME_BASE}TF${1/(\\w)/${1:/upcase}/}} t */",
            "function $1Deceit(t) {",
            "    ",
            "    try {",
            "        ",
            "        return $1Verify(t);",
            "        ",
            "    } catch (e) {",
            "        ",
            "        if (config.strict) throw e;",
            "        ",
            "        return undefined;",
            "        ",
            "    };",
            "    ",
            "};",
            "/** @arg {${TM_FILENAME_BASE}TF${1/(\\w)/${1:/upcase}/}} t */",
            "function $1Verify(t) {",
            "    ",
            "    const {",
            "    ",
            "    ",
            "    ",
            "    } = t;",
            "    ",
            "    return $1Handle(t);",
            "   ",
            "};",
            "/** @arg {${TM_FILENAME_BASE}TF${1/(\\w)/${1:/upcase}/}} t */",
            "function $1Handle(t) {",
            "   ",
            "    const {",
            "    ",
            "    ",
            "    ",
            "    } = t;",
            "   ",
            "    return $1Comply(t);",
            "   ",
            "};",
            "/** @arg {${TM_FILENAME_BASE}TF${1/(\\w)/${1:/upcase}/}} t */",
            "function $1Comply(t) {",
            "   ",
            "    const {",
            "    ",
            "    ",
            "    ",
            "    } = t;",
            "    ",
            "    ",
            "    ",
            "};",
            "",
            "$0",
            "",
            "//#endregion",
        ],
        "prefix": "#f"
    },
    "functionA": {
        "body": [
            "/**",
            " * ### $TM_FILENAME_BASE$1",
            " * - Версия `0.0.0`",
            " * - Цепочка `DVHCa`",
            " * - Модуль `$TM_FILENAME_BASE`",
            " * ***",
            " * ",
            " * $3",
            " * ",
            " * ***",
            " * $2",
            "*/",
            "export function $TM_FILENAME_BASE$1() {",
            "",
            "",
            "",
            "};",
        ],
        "prefix": "#fA",
        "description": "Добавить функцию агрегатор."
    },

    "breakpoint": {

        "body": [

            "console.log('${RELATIVE_FILEPATH/[^\\w\\d,-. _]/\\/\\//g} $TM_LINE_INDEX');",
            "console.log(${1|[],this|}$0);",
            "console.log('#'.repeat(5));",

        ],
        "prefix": "#b"

    },
    "breakpointExit": {

        "body": [

            "console.log('${RELATIVE_FILEPATH/[^\\w\\d,-. _]/\\/\\//g} $TM_LINE_INDEX');",
            "console.log(${1|[],this|}$0);",
            "console.log('#'.repeat(5));",
            "process.exit();"

        ],
        "prefix": "#be"

    },
}